#include "image.h"
#include "eepromMap.h"
#include <avr/pgmspace.h>

unsigned char colors[16][3]={{0x63 ,0x6f ,0x6c},{0x0 ,0x0 ,0x0},{0x99 ,0x66 ,0x0},{0xcc ,0x99 ,0x33},{0xff ,0xcc ,0x33},{0xff ,0xff ,0xff},};
/*const unsigned char img[512] PROGMEM={
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x1,0x55,0x53,0x33,0x33,0x33,0x32,0x10,
0x15,0x51,0x11,0x44,0x44,0x44,0x33,0x21,
0x15,0x55,0x55,0x14,0x44,0x44,0x43,0x21,
0x15,0x55,0x55,0x51,0x44,0x44,0x43,0x21,
0x13,0x11,0x55,0x51,0x44,0x14,0x43,0x21,
0x15,0x11,0x55,0x51,0x44,0x14,0x43,0x21,
0x13,0x55,0x55,0x14,0x44,0x14,0x43,0x21,
0x13,0x55,0x11,0x44,0x44,0x14,0x43,0x21,
0x13,0x11,0x44,0x44,0x44,0x44,0x43,0x21,
0x13,0x55,0x14,0x44,0x44,0x44,0x43,0x21,
0x13,0x55,0x14,0x44,0x44,0x44,0x43,0x21,
0x13,0x21,0x44,0x44,0x44,0x44,0x33,0x21,
0x12,0x33,0x33,0x33,0x33,0x33,0x32,0x21,
0x1,0x22,0x22,0x22,0x22,0x22,0x22,0x10,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x1,0x55,0x53,0x33,0x33,0x33,0x32,0x10,
0x15,0x51,0x44,0x44,0x44,0x44,0x11,0x21,
0x15,0x55,0x14,0x44,0x44,0x41,0x55,0x21,
0x15,0x55,0x51,0x44,0x44,0x15,0x55,0x21,
0x13,0x55,0x51,0x44,0x44,0x15,0x55,0x21,
0x15,0x55,0x51,0x44,0x44,0x11,0x11,0x21,
0x13,0x55,0x11,0x44,0x44,0x14,0x41,0x21,
0x13,0x11,0x41,0x44,0x44,0x14,0x41,0x21,
0x13,0x44,0x44,0x44,0x44,0x44,0x44,0x21,
0x13,0x14,0x44,0x44,0x44,0x44,0x41,0x21,
0x13,0x14,0x44,0x44,0x44,0x44,0x41,0x21,
0x12,0x34,0x44,0x44,0x44,0x44,0x44,0x21,
0x12,0x33,0x33,0x33,0x33,0x33,0x32,0x21,
0x1,0x22,0x22,0x22,0x22,0x22,0x22,0x10,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x1,0x55,0x53,0x33,0x33,0x33,0x32,0x10,
0x15,0x54,0x44,0x44,0x41,0x11,0x11,0x21,
0x15,0x44,0x44,0x44,0x15,0x55,0x55,0x21,
0x15,0x44,0x44,0x41,0x55,0x55,0x55,0x21,
0x13,0x44,0x41,0x41,0x55,0x51,0x11,0x21,
0x15,0x44,0x41,0x44,0x11,0x11,0x11,0x21,
0x13,0x44,0x41,0x44,0x44,0x15,0x55,0x21,
0x13,0x44,0x41,0x44,0x44,0x15,0x55,0x21,
0x13,0x44,0x44,0x44,0x44,0x41,0x11,0x21,
0x13,0x44,0x44,0x44,0x44,0x15,0x55,0x21,
0x13,0x44,0x44,0x44,0x44,0x15,0x55,0x21,
0x13,0x34,0x44,0x44,0x44,0x41,0x11,0x21,
0x12,0x33,0x33,0x33,0x33,0x33,0x32,0x21,
0x1,0x22,0x22,0x22,0x22,0x22,0x22,0x10,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
0x1,0x55,0x53,0x33,0x33,0x33,0x32,0x10,
0x15,0x54,0x11,0x11,0x11,0x14,0x33,0x21,
0x15,0x41,0x55,0x55,0x55,0x51,0x43,0x21,
0x15,0x15,0x55,0x55,0x55,0x55,0x13,0x21,
0x13,0x15,0x55,0x11,0x15,0x55,0x13,0x21,
0x15,0x41,0x11,0x11,0x15,0x55,0x13,0x21,
0x13,0x44,0x41,0x55,0x55,0x51,0x43,0x21,
0x13,0x44,0x41,0x55,0x51,0x14,0x43,0x21,
0x13,0x44,0x44,0x11,0x14,0x44,0x43,0x21,
0x13,0x44,0x41,0x55,0x51,0x44,0x43,0x21,
0x13,0x44,0x41,0x55,0x51,0x44,0x43,0x21,
0x13,0x34,0x44,0x11,0x14,0x44,0x33,0x21,
0x12,0x33,0x33,0x33,0x33,0x33,0x32,0x21,
0x1,0x22,0x22,0x22,0x22,0x22,0x22,0x10,
0x0,0x11,0x11,0x11,0x11,0x11,0x11,0x0,
};
*/

int frame=0;
int frameCount=4;
unsigned char brightness=32;
unsigned char brightnessTable[3]={32,128,254};
unsigned char brightnessIdx=0;
unsigned char fileIdx=0;

extern Adafruit_NeoPixel strip;

void nextBrightness()
{
  if(brightnessIdx<2)  brightnessIdx++;
  brightness=brightnessTable[brightnessIdx];
}

void prevBrightness()
{
  if(brightnessIdx>0)  brightnessIdx--;
  brightness=brightnessTable[brightnessIdx];
}

void nextFrame()
{
  frame=(frame+1)%frameCount;
}

void showImage(){
  
  int pixlcount=0; //255 max, 16*16
  int pixl=0;
  unsigned char img_dir=0;
  unsigned char img_dir1=0;
  unsigned char img_dir2=0;
  nextFrame();
  char halfMtx=MATRIX_H/2;
  char pin=MTX_PIN_UP;
  char matrixEnd=halfMtx;
  for(char matrixIni=0;matrixIni<MATRIX_H;matrixIni+=halfMtx,matrixEnd+=halfMtx)
  {  
    strip.setPin(pin);
    pin++;
      
    pixlcount=0; //255 max, 16*16
    pixl=0;
    for(int i=matrixIni;i<matrixEnd;i++){    
      if(i%2)
      {
        for(int j=0;j<MATRIX_W/2;j++){
          pixl=i*(MATRIX_W/2)+j;
          //img_dir=pgm_read_byte_near(img+(frame*128)+pixl);
          img_dir=EEPROM[EEPROM_IMAGE+(frame*128)+pixl];
          img_dir1=(img_dir&0xF0)>>4;
          img_dir2=(img_dir&0x0F);
          strip.setPixelColor(pixlcount,
          colors[img_dir1][0],
          colors[img_dir1][1],
          colors[img_dir1][2]);
          pixlcount++;       
          strip.setPixelColor(pixlcount,
          colors[img_dir2][0],
          colors[img_dir2][1],
          colors[img_dir2][2]);
          pixlcount++;         
        }
          
      }else{
        for(int j=((MATRIX_W/2)-1);j>=0;j--){
            pixl=i*(MATRIX_W/2)+j;
            //img_dir=pgm_read_byte_near(img+(frame*128)+pixl);
            img_dir=EEPROM[EEPROM_IMAGE+(frame*128)+pixl];
            img_dir2=(img_dir&0xF0)>>4;
            img_dir1=(img_dir&0x0F);
            strip.setPixelColor(pixlcount,
            colors[img_dir1][0],
            colors[img_dir1][1],
            colors[img_dir1][2]);
            pixlcount++;       
            strip.setPixelColor(pixlcount,
            colors[img_dir2][0],
            colors[img_dir2][1],
            colors[img_dir2][2]);
            pixlcount++;    
         }
      }
    }
    strip.setBrightness(brightness);
    strip.show();
  }
}

void showImageProgramIR(char pos){
  
  int pixlcount=0; //255 max, 16*16
  char color=0;
  char halfMtx=MATRIX_H/2;
  char pin=MTX_PIN_UP;
  
  for(char matrixIni=0;matrixIni<MATRIX_H;matrixIni+=halfMtx)
  {  
    strip.setPin(pin);
    pin++;
        
    pixlcount=0; //255 max, 16*16
    for(int i=0;i<halfMtx;i++){    
        for(int j=0;j<MATRIX_W;j++){
          if(pixlcount==pos)
                color=256;
            else 
                color=128;
          strip.setPixelColor(pixlcount,
            color,
            color,
            color);
          pixlcount++; 
      }          
    }
    
    strip.setBrightness(brightness);
    strip.show();
  }
}

extern File myFile;
void loadImage(char* img_file)
{
  
  unsigned char i=0;
  unsigned char j=0;
  unsigned int pal_idx=0;
  if(!SD.exists(img_file))
  {
    return;
  }
  myFile = SD.open(img_file, FILE_READ);
  myFile.read(&frameCount,sizeof(int));
  unsigned char fc=(unsigned char)frameCount;
  EEPROM[EEPROM_NUMFRAMES]=fc;
  
  for(i=0;i<16;i++)
  for(j=0;j<3;j++)
  {
    unsigned char color;
    myFile.read(&(color),sizeof(char));
    EEPROM[EEPROM_PAL+pal_idx]=color;
    pal_idx++;
    colors[i][j]=color;
  }
  
  for(i=0;i<frameCount;i++)
  for(j=0;j<128;j+=4)
  {  unsigned char color[4];
     myFile.read(&(color[0]),sizeof(char)*4);
     EEPROM[EEPROM_IMAGE+i*128+j]=color[0];
     EEPROM[EEPROM_IMAGE+i*128+j+1]=color[1];
     EEPROM[EEPROM_IMAGE+i*128+j+2]=color[2];
     EEPROM[EEPROM_IMAGE+i*128+j+3]=color[3];
  }
  myFile.close();
}

void loadImageEEPROM()
{
  unsigned char i=0;
  unsigned char j=0;
    
  unsigned char color=0;
  unsigned char pal_idx=0;
  for(i=0;i<16;i++)
  for(j=0;j<3;j++)
  {
    color=EEPROM[EEPROM_PAL+pal_idx];
    pal_idx++;
    colors[i][j]=color;
  }
  unsigned char fc=EEPROM[EEPROM_NUMFRAMES];
  frameCount=(int)fc;
  fileIdx=EEPROM[EEPROM_LAST_FILE];
}

void loadNextFile()
{
  char filename[20];
  fileIdx++;
  sprintf(filename,"default%d.led\0",fileIdx);
  if(SD.exists(filename)){
    loadImage(filename);
  }
  else{
     fileIdx=1;
     loadImage("default1.led");     
  }
  EEPROM[EEPROM_LAST_FILE]=fileIdx;
}

void loadPrevFile()
{
  char filename[16];
  fileIdx--;
  sprintf(filename,"default%d.led\0",fileIdx);
  if(SD.exists(filename)){
    loadImage(filename);
  }
  else{
     fileIdx=1;
     loadImage("default1.led");     
  }
  EEPROM[EEPROM_LAST_FILE]=fileIdx;
}
